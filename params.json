{"name":"Open HMI Tester","tagline":"An open, cross-platform application framework for the development of GUI testing tools.","body":"OHT: Open HMI Tester\r\n====================\r\n\r\n\"Open HMI Tester\" or OHT is an application framework for the development of **GUI testing tools**. It uses\r\nGUI **introspection** to capture and simulate **real user interaction**, which enhances\r\nrobustness and tolerance to changes during testing stage. \r\n\r\nOHT provides a **cross-platform, open design** to support major event-based GUI platforms. Furthermore,\r\nit can be integrated into ongoing and legacy developments due to it being **not code-intrusive**. \r\nAs a result, the framework provides an adaptable, extensible, scalable,\r\nand **robust basis** to support the automation of GUI testing processes. \r\n\r\nOHT is open-source and ready to use.\r\n\r\nOHT can be adapted to **support different GUI platforms** and operating systems. An adaptation to Qt-Linux\r\ntesting environments is provided in this repository.\r\n\r\n# Any question? Any bug?\r\n\r\nPlease, contact me at pedrolmn@gmail.com\r\n\r\n# OHT in action\r\n\r\n## Recording and playing desktop test cases\r\n\r\n[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/PiwPB8uwZOk/0.jpg)](http://www.youtube.com/watch?v=PiwPB8uwZOk)\r\n\r\nhttps://www.youtube.com/watch?v=PiwPB8uwZOk\r\n\r\n## Recording and playing web test cases\r\n\r\nNote that this might produce unexpected results, as in the current implementation of the OHT, the test is recorded in the browser, not in the web page. We are working hard to provide a robust web-testing experience.\r\n\r\n[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/Smcj3WmdPdQ/0.jpg)](http://www.youtube.com/watch?v=Smcj3WmdPdQ)\r\n\r\nhttps://www.youtube.com/watch?v=Smcj3WmdPdQ\r\n\r\n\r\n# Content of this repository\r\n\r\n## OHT base architecture\r\n\r\n* common: includes common sources.\r\n* hmi_tester: includes implementation of the OHT controller\r\n* lib_preload: includes implementation of the library injected in the application to test.\r\n* build_oht_base: Qt Creator project to build the base architecture.\r\n\r\n\r\n\r\n## Qt-Linux OHT Adaptation\r\n\r\n* qt_linux_hmi_tester: implementation of the OHT controller for a Qt-Linux testing environment.\r\n* qt_linux_lib_preload: implementation of the injected library for a Qt-Linux testing environment.\r\n* build_oht_qt_linux: Qt Creator project to build the Qt-Linux GUI testing tool.\r\n\r\n# FAQ\r\n\r\n### How to adapt OHT to Windows environments?\r\n\r\n1. In qt_linux_hmi_tester, find the class linuxpreloadingaction.h.Â \r\n2. Create a similar class to support library preloading in windows.\r\n3. In qt_linux_lib_preload, find qtx11preloadingcontrol class.\r\n4. Create a similar class to \"wake up\" the OHT at application startup and start OHT installation process.\r\n\r\n### How does the injection + preloading process works?\r\n\r\n1. The class doing DLL injection before application launching is called LinuxPreloadingAction (extends PreloadingAction) and it is in the HMI Tester. In Linux, it uses the environment variable LD_PRELOAD to set the library to be preloaded before target application launching.\r\n\r\n2. The class deploying the OHT services into the target application is QtX11PreloadingControl (extends PreloadingControl) and it is in the Lib Preload. In Linux, it uses QWidget::x11Event in Qt4, or QWidget::nativeEvent in Qt5 to \"automatically wake up\" and start deploying event consumer and executor.\r\n\r\n# Further information\r\n\r\nWebpage: http://www.catedrasaes.org/wiki/OHT\r\n\r\nVideos: http://www.youtube.com/user/CatedraSaesUmu\r\n\r\n\r\n\r\n\r\n","google":"UA-69538992-1","note":"Don't delete this file! It's used internally to help with page regeneration."}